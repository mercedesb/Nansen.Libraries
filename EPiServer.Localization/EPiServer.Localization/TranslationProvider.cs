using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Globalization;
using System.IO;
using System.Text;
using System.Xml;

using EPiServer.Framework.Localization.XmlResources;

using log4net;

namespace EPiServer.Localization
{
	/// <summary>
	///     The translation provider.
	/// </summary>
	public class TranslationProvider : XmlLocalizationProvider
	{
		#region Static Fields

		/// <summary>
		///     The logger.
		/// </summary>
		private static readonly ILog Logger = LogManager.GetLogger(typeof(TranslationProvider));

		#endregion

		#region Public Properties

		/// <summary>
		///     Gets all available languages from the translation container.
		///     An available language does not need to contain any translations.
		/// </summary>
		public override IEnumerable<CultureInfo> AvailableLanguages
		{
			get
			{
				return TranslationFactory.Instance.AvailableLanguages;
			}
		}

		#endregion

		#region Public Methods and Operators

		/// <summary>
		/// Initializes the provider.
		/// </summary>
		/// <param name="name">
		/// The friendly name of the provider.
		/// </param>
		/// <param name="config">
		/// A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.
		/// </param>
		public override void Initialize(string name, NameValueCollection config)
		{
			base.Initialize(name, config);
			this.LoadTranslations();
		}

		#endregion

		#region Methods

		/// <summary>
		///     Load the translations.
		/// </summary>
		public void LoadTranslations()
		{
			try
			{
				string translations = TranslationFactory.Instance.GetXDocument();
				byte[] byteArray = Encoding.Unicode.GetBytes(translations);

				using (MemoryStream stream = new MemoryStream(byteArray))
				{
					this.Load(stream);
				}
			}
			catch (ArgumentNullException argumentNullException)
			{
				Logger.Error(
					"No xml generated by the TranslationFactory while handling Reload event.", argumentNullException);
			}
			catch (EncoderFallbackException encoderFallbackException)
			{
				Logger.Error("Encoder exception while handling Reload event.", encoderFallbackException);
			}
			catch (XmlException xmlException)
			{
				Logger.Error(
					"Invalid xml generated by the TranslationFactory while handling Reload event.", xmlException);
			}
		}

		#endregion
	}
}
